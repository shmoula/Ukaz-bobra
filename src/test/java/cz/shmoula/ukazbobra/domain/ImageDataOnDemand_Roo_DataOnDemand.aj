// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package cz.shmoula.ukazbobra.domain;

import cz.shmoula.ukazbobra.domain.Image;
import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect ImageDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ImageDataOnDemand: @Component;
    
    private Random ImageDataOnDemand.rnd = new SecureRandom();
    
    private List<Image> ImageDataOnDemand.data;
    
    public Image ImageDataOnDemand.getNewTransientImage(int index) {
        Image obj = new Image();
        setContent(obj, index);
        setContentType(obj, index);
        setFilename(obj, index);
        setFilesize(obj, index);
        setUploaded(obj, index);
        return obj;
    }
    
    public void ImageDataOnDemand.setContent(Image obj, int index) {
        byte[] content = String.valueOf(index).getBytes();
        obj.setContent(content);
    }
    
    public void ImageDataOnDemand.setContentType(Image obj, int index) {
        String contentType = "contentType_" + index;
        obj.setContentType(contentType);
    }
    
    public void ImageDataOnDemand.setFilename(Image obj, int index) {
        String filename = "filename_" + index;
        obj.setFilename(filename);
    }
    
    public void ImageDataOnDemand.setFilesize(Image obj, int index) {
        Long filesize = new Integer(index).longValue();
        obj.setFilesize(filesize);
    }
    
    public void ImageDataOnDemand.setUploaded(Image obj, int index) {
        Date uploaded = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUploaded(uploaded);
    }
    
    public Image ImageDataOnDemand.getSpecificImage(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Image obj = data.get(index);
        return Image.findImage(obj.getId());
    }
    
    public Image ImageDataOnDemand.getRandomImage() {
        init();
        Image obj = data.get(rnd.nextInt(data.size()));
        return Image.findImage(obj.getId());
    }
    
    public boolean ImageDataOnDemand.modifyImage(Image obj) {
        return false;
    }
    
    public void ImageDataOnDemand.init() {
        data = Image.findImageEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Image' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<cz.shmoula.ukazbobra.domain.Image>();
        for (int i = 0; i < 10; i++) {
            Image obj = getNewTransientImage(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
